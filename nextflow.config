manifest {
  description = 'A rnaseq pipeline based on nextflow' 
  author = 'Lx Gui'
}

/* 
 * defines execution profiles for different environments  
 */ 

profiles {

  slurm {
    process.executor = 'slurm'
    process.queue='lc'
    singularity.enabled = true
  }
  
  conda {
    process.conda = '/public/software/miniconda3/envs/nf/'
  }

}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 256.GB
  max_cpus = 40
  max_time = 240.h
  markdup_java_options = '"-Xms8g -Xmx20g"' //Established values for markDuplicate memory consumption, see issue PR #689 (in Sarek) for details  
  // fr: fr-firststrand ; rf: fr-secondstrand
  picard_lib = [ "unstranded": "NONE", "rf": "FIRST_READ_TRANSCRIPTION_STRAND", "fr": "SECOND_READ_TRANSCRIPTION_STRAND" ]
  bowtie2_lib = [ "unstranded": "", "fr": "--fr --nofw", "rf": "--rf --norc"]
  scallop_lib = ["unstranded": "", "fr": "--library_type first", "rf": "--library_type second"]
  stranded_flag = ["unstranded": "", "fr": "--stranded", "rf": "--stranded"]
  stringtie_lib = ["unstranded": "", "fr": "--rf", "rf": "--fr"]
  kallisto_lib = ["unstranded": "", "fr":"--rf-stranded", "rf": "--fr-stranded"]
}


/*
process {

  withName:markDuplicates {
	  // Actually the -Xmx value should be kept lower,
    // and is set through the markdup_java_options
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  
}
*/

// libtype map
